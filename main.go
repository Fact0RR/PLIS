package main

import (
	"fmt"
	"log"
	"net/http"
	"regexp"
	"strings"

	"github.com/PuerkitoBio/goquery"
)

func main() {
	url := "https://www.smd.ru/katalog/poluprovodnikovye_diody_SMD/smd_LED_svetodiody/LED_0603_1204_1206/"

	// –ú–∞—Å—Å–∏–≤ –∏—Å–∫–æ–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
	targetColumns := []string{
		"–¶–≤–µ—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–∏–æ–¥–∞",
		"–ü—Ä—è–º–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í) –ø—Ä–∏ —Ç–æ–∫–µ 20 –º–ê",
	}

	// –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		log.Fatal("–°—Ç–∞—Ç—É—Å –∫–æ–¥ –Ω–µ 200:", resp.StatusCode)
	}

	// –ü–∞—Ä—Å–∏–º HTML
	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML:", err)
	}

	// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª–∞—Å—Å–æ–º "goodsByArticul"
	tables := doc.Find("table.goodsByArticul")
	fmt.Printf("–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å –∫–ª–∞—Å—Å–æ–º 'goodsByArticul': %d\n\n", tables.Length())

	// –í–´–í–û–î–ò–ú –í–°–ï –ó–ê–ì–û–õ–û–í–ö–ò –í–°–ï–• –¢–ê–ë–õ–ò–¶ –í –ù–ê–ß–ê–õ–ï
	//printAllTableHeaders(tables, targetColumns)

	// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
	tables.Each(func(tableIndex int, table *goquery.Selection) {
		fmt.Printf("‚ïê‚ïê‚ïê‚ïê‚ïê –¢–∞–±–ª–∏—Ü–∞ ‚Ññ%d ‚ïê‚ïê‚ïê‚ïê‚ïê\n", tableIndex+1)

		// –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
		headers := getTableHeaders(table)
		
		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º targetColumns
		normalizedTargets := make([]string, len(targetColumns))
		for i, target := range targetColumns {
			normalizedTargets[i] = normalizeString(target)
		}

		// –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∏—Å–∫–æ–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
		foundColumns := findTargetColumns(headers, normalizedTargets, targetColumns)
		
		if len(foundColumns) == 0 {
			fmt.Println("‚ùå –ò—Å–∫–æ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
			fmt.Printf("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: %v\n", headers)
			fmt.Println()
			return
		}

		// –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
		fmt.Println("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã:")
		for target, index := range foundColumns {
			fmt.Printf("   %s (—Å—Ç–æ–ª–±–µ—Ü %d)\n", target, index+1)
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
		fmt.Println("\nüìä –î–∞–Ω–Ω—ã–µ:")
		rows := table.Find("tr").Slice(1, goquery.ToEnd)
		rows.Each(func(rowIndex int, row *goquery.Selection) {
			cells := row.Find("td")
			if cells.Length() == 0 {
				return
			}

			fmt.Printf("\n–°—Ç—Ä–æ–∫–∞ %d:\n", rowIndex+1)
			fmt.Println("‚îÄ" + strings.Repeat("‚îÄ", 30))
			
			for target, columnIndex := range foundColumns {
				if columnIndex < cells.Length() {
					value := strings.TrimSpace(cells.Eq(columnIndex).Text())
					fmt.Printf("‚îÇ %-25s: %s\n", target, value)
				}
			}
		})

		fmt.Println("\n" + strings.Repeat("‚ïê", 50) + "\n")
	})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
func printAllTableHeaders(tables *goquery.Selection, targetColumns []string) {
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println("üìã –í–°–ï –ó–ê–ì–û–õ–û–í–ö–ò –í–°–ï–• –¢–ê–ë–õ–ò–¶:")
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º targetColumns –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
	normalizedTargets := make([]string, len(targetColumns))
	for i, target := range targetColumns {
		normalizedTargets[i] = normalizeString(target)
	}

	tables.Each(func(tableIndex int, table *goquery.Selection) {
		headers := getTableHeaders(table)
		
		fmt.Printf("\nüìä –¢–∞–±–ª–∏—Ü–∞ ‚Ññ%d - –ó–∞–≥–æ–ª–æ–≤–∫–∏ (%d):\n", tableIndex+1, len(headers))
		fmt.Println("‚îÄ" + strings.Repeat("‚îÄ", 50))
		
		for i, header := range headers {
			normalizedHeader := normalizeString(header)
			matchInfo := ""
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–∞–∂–¥—ã–º targetColumn
			for j, normalizedTarget := range normalizedTargets {
				if strings.Contains(normalizedHeader, normalizedTarget) {
					matchInfo = fmt.Sprintf(" ‚úÖ (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å targetColumns[%d])", j)
					break
				}
			}
			
			fmt.Printf("‚îÇ %2d. –û—Ä–∏–≥–∏–Ω–∞–ª: \"%s\"\n", i+1, header)
			fmt.Printf("‚îÇ     –ù–æ—Ä–º–∞–ª.:  \"%s\"%s\n", normalizedHeader, matchInfo)
			fmt.Println("‚îÇ" + strings.Repeat("‚îÄ", 50))
		}
	})

	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println("üéØ –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã:", targetColumns)
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
func normalizeString(s string) string {
	// –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
	s = strings.ToLower(s)
	
	// –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—É–ª—è—Ü–∏–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã)
	re := regexp.MustCompile(`[\s\p{Zs}]+`)
	s = re.ReplaceAllString(s, "")
	
	return s
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
func getTableHeaders(table *goquery.Selection) []string {
	var headers []string
	
	// –ò—â–µ–º th —ç–ª–µ–º–µ–Ω—Ç—ã
	thElements := table.Find("th")
	if thElements.Length() > 0 {
		thElements.Each(func(i int, s *goquery.Selection) {
			headers = append(headers, strings.TrimSpace(s.Text()))
		})
		return headers
	}

	// –ï—Å–ª–∏ th –Ω–µ—Ç, –∏—â–µ–º –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ td
	firstRow := table.Find("tr").First()
	firstRow.Find("td").Each(func(i int, s *goquery.Selection) {
		headers = append(headers, strings.TrimSpace(s.Text()))
	})
	
	return headers
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
func findTargetColumns(headers []string, normalizedTargets []string, originalTargets []string) map[string]int {
	result := make(map[string]int)
	
	for i, header := range headers {
		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
		normalizedHeader := normalizeString(header)
		
		// –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ targetColumns
		for j, normalizedTarget := range normalizedTargets {
			if strings.Contains(normalizedHeader, normalizedTarget) {
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
				result[originalTargets[j]] = i
				break
			}
		}
	}
	
	return result
}