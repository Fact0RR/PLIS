package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"unicode"

	"github.com/PuerkitoBio/goquery"
	"github.com/tealeg/xlsx/v3"
)

type Component struct {
	targetColumns map[string]string
	sheetName     string
	url           string
}

func main() {

	filename := "Library.xlsx"

	component := Component{
		targetColumns: map[string]string{
		"Color":   "–¶–≤–µ—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–∏–æ–¥–∞",
		"Voltage": "–ü—Ä—è–º–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í) –ø—Ä–∏ —Ç–æ–∫–µ 20 –º–ê",
		},
		sheetName: "LedsParsed",
		url: "https://www.smd.ru/katalog/poluprovodnikovye_diody_SMD/smd_LED_svetodiody/LED_0603_1204_1206/",
	}

	// –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
	resp, err := http.Get(component.url)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		log.Fatal("–°—Ç–∞—Ç—É—Å –∫–æ–¥ –Ω–µ 200:", resp.StatusCode)
	}

	// –ü–∞—Ä—Å–∏–º HTML
	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML:", err)
	}

	// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª–∞—Å—Å–æ–º "goodsByArticul"
	tables := doc.Find("table.goodsByArticul")
	fmt.Printf("–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å –∫–ª–∞—Å—Å–æ–º 'goodsByArticul': %d\n\n", tables.Length())

	// –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü
	printAllTableHeaders(tables, component.targetColumns)

	// –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
	allData := collectDataFromTables(tables, component.targetColumns)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ XLSX —Ñ–∞–π–ª
	err = writeToXLSX(allData, filename, component.sheetName)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ XLSX:", err)
	}

	fmt.Printf("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ %s –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É %s", filename, component.sheetName)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
func collectDataFromTables(tables *goquery.Selection, targetColumns map[string]string) []map[string]string {
	var allData []map[string]string

	tables.Each(func(tableIndex int, table *goquery.Selection) {
		fmt.Printf("‚ïê‚ïê‚ïê‚ïê‚ïê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ‚Ññ%d ‚ïê‚ïê‚ïê‚ïê‚ïê\n", tableIndex+1)

		// –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
		headers := getTableHeaders(table)

		// –°–æ–∑–¥–∞–µ–º map –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è XLSX –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
		columnIndexes := make(map[string]int)

		// –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
		for xlsxHeader, searchPattern := range targetColumns {
			normalizedSearch := normalizeString(searchPattern)

			for i, header := range headers {
				normalizedHeader := normalizeString(header)
				if strings.Contains(normalizedHeader, normalizedSearch) {
					columnIndexes[xlsxHeader] = i
					fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü: '%s' -> '%s' (–∏–Ω–¥–µ–∫—Å: %d)\n",
						searchPattern, xlsxHeader, i)
					break
				}
			}
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
		rows := table.Find("tr").Slice(1, goquery.ToEnd)
		rows.Each(func(rowIndex int, row *goquery.Selection) {
			cells := row.Find("td")
			if cells.Length() == 0 {
				return
			}

			// –°–æ–∑–¥–∞–µ–º map –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏
			rowData := make(map[string]string)

			// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ XLSX —Å—Ç–æ–ª–±—Ü–∞
			for xlsxHeader, columnIndex := range columnIndexes {
				if columnIndex < cells.Length() {
					value := strings.TrimSpace(cells.Eq(columnIndex).Text())
					rowData[xlsxHeader] = value
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
			if len(rowData) > 0 {
				allData = append(allData, rowData)
				fmt.Printf("üìù –°–æ–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ %d: %v\n", len(allData), rowData)
			}
		})
	})

	return allData
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ XLSX —Ñ–∞–π–ª
func writeToXLSX(data []map[string]string, filename, sheetName string) error {
	var file *xlsx.File
	var sheet *xlsx.Sheet

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
	if _, err := os.Stat(filename); os.IsNotExist(err) {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
		file = xlsx.NewFile()
		sheet, err = file.AddSheet(sheetName)
		if err != nil {
			return err
		}
	} else {
		// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
		file, err = xlsx.OpenFile(filename)
		if err != nil {
			return err
		}

		// –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
		if _, exists := file.Sheet[sheetName]; exists {
			delete(file.Sheet, sheetName)
		}

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
		sheet, err = file.AddSheet(sheetName)
		if err != nil {
			return err
		}
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
	if len(data) == 0 {
		return fmt.Errorf("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏")
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
	headerRow := sheet.AddRow()
	headers := getXLSXHeaders(data[0])
	for _, header := range headers {
		cell := headerRow.AddCell()
		cell.Value = header
		cell.SetStyle(getHeaderStyle())
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	for _, rowData := range data {
		row := sheet.AddRow()
		for _, header := range headers {
			cell := row.AddCell()
			cell.Value = rowData[header]
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	return file.Save(filename)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ XLSX –∏–∑ –¥–∞–Ω–Ω—ã—Ö
func getXLSXHeaders(data map[string]string) []string {
	headers := make([]string, 0, len(data))
	for header := range data {
		headers = append(headers, header)
	}
	return headers
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
func getHeaderStyle() *xlsx.Style {
	style := xlsx.NewStyle()
	style.Font.Bold = true
	style.Fill.FgColor = "00FFFF00" // –ñ–µ–ª—Ç—ã–π —Ñ–æ–Ω
	style.Fill.PatternType = "solid"
	return style
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
func printAllTableHeaders(tables *goquery.Selection, targetColumns map[string]string) {
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println("üìã –í–°–ï –ó–ê–ì–û–õ–û–í–ö–ò –í–°–ï–• –¢–ê–ë–õ–ò–¶:")
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
	var searchPatterns []string
	for _, pattern := range targetColumns {
		searchPatterns = append(searchPatterns, pattern)
	}

	tables.Each(func(tableIndex int, table *goquery.Selection) {
		headers := getTableHeaders(table)

		fmt.Printf("\nüìä –¢–∞–±–ª–∏—Ü–∞ ‚Ññ%d - –ó–∞–≥–æ–ª–æ–≤–∫–∏ (%d):\n", tableIndex+1, len(headers))
		fmt.Println("‚îÄ" + strings.Repeat("‚îÄ", 50))

		for i, header := range headers {
			normalizedHeader := normalizeString(header)
			matchInfo := ""

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–∞–∂–¥—ã–º searchPattern
			for j, pattern := range searchPatterns {
				normalizedPattern := normalizeString(pattern)
				if strings.Contains(normalizedHeader, normalizedPattern) {
					matchInfo = fmt.Sprintf(" ‚úÖ (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º[%d])", j)
					break
				}
			}

			fmt.Printf("‚îÇ %2d. –û—Ä–∏–≥–∏–Ω–∞–ª: \"%s\"\n", i+1, header)
			fmt.Printf("‚îÇ     –ù–æ—Ä–º–∞–ª.:  \"%s\"%s\n", normalizedHeader, matchInfo)
			fmt.Println("‚îÇ" + strings.Repeat("‚îÄ", 50))
		}
	})

	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println("üéØ –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã (XLSX Header -> Search Pattern):")
	for xlsxHeader, pattern := range targetColumns {
		fmt.Printf("   %s -> \"%s\"\n", xlsxHeader, pattern)
	}
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
func normalizeString(s string) string {
	// –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
	s = strings.ToLower(s)

	// –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	var result strings.Builder
	for _, r := range s {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—É–ª—è—Ü–∏–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
		if !unicode.IsSpace(r) {
			result.WriteRune(r)
		}
	}

	return result.String()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
func getTableHeaders(table *goquery.Selection) []string {
	var headers []string

	// –ò—â–µ–º th —ç–ª–µ–º–µ–Ω—Ç—ã
	thElements := table.Find("th")
	if thElements.Length() > 0 {
		thElements.Each(func(i int, s *goquery.Selection) {
			headers = append(headers, strings.TrimSpace(s.Text()))
		})
		return headers
	}

	// –ï—Å–ª–∏ th –Ω–µ—Ç, –∏—â–µ–º –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ td
	firstRow := table.Find("tr").First()
	firstRow.Find("td").Each(func(i int, s *goquery.Selection) {
		headers = append(headers, strings.TrimSpace(s.Text()))
	})

	return headers
}
